@page "/tags"
@using Flurl
@inject NavigationManager NavigationManager
@inject BlogeratorContainer container
@inject TagManager tagManager

@attribute [AllowAnonymous]

<PageTitle>Tags</PageTitle>

<h1>Tags</h1>

@if (!container.IsInitialized)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudChipSet @bind-SelectedChips="selectedTags" MultiSelection="true" Filter="true">
        @foreach (var tag in tagManager.Tags)
        {
            var text = $"{tag.Name} x{tag.Posts.Count()}";
            var isDefault = filterTags.Contains(tag.Name.ToLower());

            <MudChip Default=@isDefault Tag=@tag.Name Text=@text Variant="Variant.Text" Color="Color.Secondary"></MudChip>
        }
    </MudChipSet>
}

@code {

    private MudChip[] selectedTags { get; set; } = Array.Empty<MudChip>();
    private HashSet<string> filterTags { get; set; } = new HashSet<string>();
    private char[] tagQueryParamSplits = new[] { ',' };

    protected override Task OnInitializedAsync()
    {
        var queryParams = new Url(NavigationManager.Uri).QueryParams;

        foreach (var query in queryParams.Where(qp => qp.Name.Equals("filter", StringComparison.InvariantCultureIgnoreCase)))
        {
            var queryTags = query.Value.ToString()
              .Split(tagQueryParamSplits, StringSplitOptions.RemoveEmptyEntries);

            foreach(var qt in queryTags)
            {
                filterTags.Add(qt.ToLower());
            }
        }

        return base.OnInitializedAsync();
    }
}
